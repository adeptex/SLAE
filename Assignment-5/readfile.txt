[+]
 |
 +- Assignment 5: Metasploit Read File 
 |_____________________________________________________________________________________


First, we try to emulate the shellcode using Libemu and quickly see the execution flow.

 	msfpayload linux/x86/read_file PATH=/etc/resolve.conf R | sctest -Svvvs 100000000000


Libemu fails to produce nicely structured output. 

We proceed to disassembling raw shellcode with Ndisasm and analyzing it with the use of
the following C libraries:

	/usr/include/i386-linux-gnu/asm/unistd_32.h
	/usr/include/asm-generic/fcntl.h 


	msfpayload linux/x86/read_file PATH=/etc/resolve.conf  R | ndisasm -u -





[+]
 |
 +- Ndisasm analysis:
 +- 	Comments are added as part of the analysis.
 |_____________________________________________________________________________________


00000000  EB36              jmp short 0x38 					; go to stage
00000002  B805000000        mov eax,0x5 					; eax = #define __NR_open 5
00000007  5B                pop ebx 						; ebx = PAYLOAD address (pathname)
00000008  31C9              xor ecx,ecx 					; ecx =  (flags)	#define O_RDONLY        00000000
0000000A  CD80              int 0x80 						; int open(const char *pathname, int flags);
0000000C  89C3              mov ebx,eax 					; ebx = file descriptor (fd)
0000000E  B803000000        mov eax,0x3 					; eax = #define __NR_read 3
00000013  89E7              mov edi,esp 					; edi = top of stack 
00000015  89F9              mov ecx,edi 					; ecx = read into here (buf)
00000017  BA00100000        mov edx,0x1000 					; edx = 0x1000 [4096 bytes] (count)
0000001C  CD80              int 0x80 						; ssize_t read(int fd, void *buf, size_t count);
0000001E  89C2              mov edx,eax 					; edx = size of read data (count)
00000020  B804000000        mov eax,0x4 					; eax = #define __NR_write 4
00000025  BB01000000        mov ebx,0x1 					; ebx = 1 [stdout] (fd)
0000002A  CD80              int 0x80 						; ssize_t write(int fd, const void *buf, size_t count);
0000002C  B801000000        mov eax,0x1 					; eax = #define __NR_exit 1
00000031  BB00000000        mov ebx,0x0 					; ebx = 0 (status)
00000036  CD80              int 0x80 						; void exit(int status);
00000038  E8C5FFFFFF        call dword 0x2 					; put PAYLOAD address on the stack and begin execution

															; PAYLOAD = /etc/resolve.conf (null terminated)
0000003D  2F                das
0000003E  657463            gs jz 0xa4
00000041  2F                das
00000042  7265              jc 0xa9
00000044  736F              jnc 0xb5
00000046  6C                insb
00000047  7665              jna 0xae
00000049  2E636F6E          arpl [cs:edi+0x6e],bp
0000004D  66                o16
0000004E  00                db 0x00





[+]
 |
 +- Discussion & Conclusions:
 |_____________________________________________________________________________________

The Metasploit Read File shellcode is easily understood by reading through the assembly code.
No additional help from GDB was needed to understand the code.

This shellcode uses the JMP-CALL-POP technique to get the address of the payload, which in 
this case was the file name. By using the address, the shellcode opens the file, reads 4096
bytes from it, and finally writes them out to the standard output stream.
